"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.InvalidViewParameterError = exports.NoParameterExpectedError = exports.ForbiddenInstructionInViewCode = exports.UnconfiguredMetadataProviderError = exports.InvalidMetadataType = exports.ProtocolNotSupported = exports.InvalidMetadata = exports.InvalidUri = exports.UriNotFound = exports.MetadataNotFound = exports.BigMapMetadataNotFound = void 0;
var BigMapMetadataNotFound = /** @class */ (function () {
    function BigMapMetadataNotFound() {
        this.name = 'BigMapMetadataNotFound';
        this.message = 'Non-compliance with the TZIP-016 standard. No big map named metadata was found in the contract storage.';
    }
    return BigMapMetadataNotFound;
}());
exports.BigMapMetadataNotFound = BigMapMetadataNotFound;
var MetadataNotFound = /** @class */ (function () {
    function MetadataNotFound(info) {
        this.info = info;
        this.name = 'MetadataNotFound';
        this.message = "No metadata was found in the contract storage. " + info;
    }
    return MetadataNotFound;
}());
exports.MetadataNotFound = MetadataNotFound;
var UriNotFound = /** @class */ (function () {
    function UriNotFound() {
        this.name = 'UriNotFound';
        this.message = 'Non-compliance with the TZIP-016 standard. No URI found in the contract storage.';
    }
    return UriNotFound;
}());
exports.UriNotFound = UriNotFound;
var InvalidUri = /** @class */ (function () {
    function InvalidUri(uri) {
        this.uri = uri;
        this.name = 'InvalidUri';
        this.message = "Non-compliance with the TZIP-016 standard. The URI is invalid: " + uri + ".";
    }
    return InvalidUri;
}());
exports.InvalidUri = InvalidUri;
var InvalidMetadata = /** @class */ (function () {
    function InvalidMetadata(invalidMetadata) {
        this.invalidMetadata = invalidMetadata;
        this.name = 'InvalidMetadata';
        this.message = "The metadata found at the pointed ressource are not compliant with tzip16 standard: " + invalidMetadata + ".";
    }
    return InvalidMetadata;
}());
exports.InvalidMetadata = InvalidMetadata;
var ProtocolNotSupported = /** @class */ (function () {
    function ProtocolNotSupported(protocol) {
        this.protocol = protocol;
        this.name = 'ProtocolNotSupported';
        this.message = "The protocol found in the URI is not supported: " + protocol + ".";
    }
    return ProtocolNotSupported;
}());
exports.ProtocolNotSupported = ProtocolNotSupported;
var InvalidMetadataType = /** @class */ (function () {
    function InvalidMetadataType() {
        this.name = 'InvalidMetadataType';
        this.message = 'The contract does not comply with the tzip16 standard. The type of metadata should be bytes.';
    }
    return InvalidMetadataType;
}());
exports.InvalidMetadataType = InvalidMetadataType;
var UnconfiguredMetadataProviderError = /** @class */ (function () {
    function UnconfiguredMetadataProviderError() {
        this.name = 'UnconfiguredMetadataProviderError';
        this.message = 'No metadata provider has been configured. The default one can be configured by calling addExtension(new Tzip16Module()) on your TezosToolkit instance.';
    }
    return UnconfiguredMetadataProviderError;
}());
exports.UnconfiguredMetadataProviderError = UnconfiguredMetadataProviderError;
var ForbiddenInstructionInViewCode = /** @class */ (function () {
    function ForbiddenInstructionInViewCode(instruction) {
        this.instruction = instruction;
        this.name = 'ForbiddenInstructionInViewCode';
        this.message = "Error found in the code of the view. It contains a forbidden instruction: " + instruction + ".";
    }
    return ForbiddenInstructionInViewCode;
}());
exports.ForbiddenInstructionInViewCode = ForbiddenInstructionInViewCode;
var NoParameterExpectedError = /** @class */ (function () {
    function NoParameterExpectedError(viewName, args) {
        this.viewName = viewName;
        this.args = args;
        this.name = 'NoParameterExpectedError';
        this.message = viewName + " Received " + args.length + " arguments while expecting no parameter or 'Unit'";
    }
    return NoParameterExpectedError;
}());
exports.NoParameterExpectedError = NoParameterExpectedError;
var InvalidViewParameterError = /** @class */ (function () {
    function InvalidViewParameterError(viewName, sigs, args) {
        this.viewName = viewName;
        this.sigs = sigs;
        this.args = args;
        this.name = 'InvalidViewParameterError';
        this.message = viewName + " Received " + args.length + " arguments while expecting one of the following signatures (" + JSON.stringify(sigs) + ")";
    }
    return InvalidViewParameterError;
}());
exports.InvalidViewParameterError = InvalidViewParameterError;
//# sourceMappingURL=tzip16-errors.js.map