"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MichelsonStorageView = void 0;
var michelson_encoder_1 = require("@taquito/michelson-encoder");
var tzip16_errors_1 = require("../tzip16-errors");
var MichelsonStorageView = /** @class */ (function () {
    function MichelsonStorageView(viewName, contract, rpc, returnType, code, viewParameterType) {
        this.viewName = viewName;
        this.contract = contract;
        this.rpc = rpc;
        this.returnType = returnType;
        this.code = code;
        this.viewParameterType = viewParameterType;
        this.validateArgs = function (args, schema, viewName) {
            var sigs = schema.ExtractSignatures();
            if (!sigs.find(function (x) { return x.length === args.length; })) {
                throw new tzip16_errors_1.InvalidViewParameterError(viewName, sigs, args);
            }
        };
    }
    /**
     * @description According to the tzip-16 standard, the following instructions must not be used in the code of the view:
     * 'AMOUNT', 'CREATE_CONTRACT', 'SENDER', 'SET_DELEGATE', 'SOURCE', and 'TRANSFER_TOKENS'
     * The method throw an error if an illegal instruction is found
     */
    MichelsonStorageView.prototype.findForbiddenInstructionInViewCode = function (code) {
        var e_1, _a, e_2, _b;
        var illegalInstructions = [
            'AMOUNT',
            'CREATE_CONTRACT',
            'SENDER',
            'SET_DELEGATE',
            'SOURCE',
            'TRANSFER_TOKENS'
        ];
        try {
            for (var illegalInstructions_1 = __values(illegalInstructions), illegalInstructions_1_1 = illegalInstructions_1.next(); !illegalInstructions_1_1.done; illegalInstructions_1_1 = illegalInstructions_1.next()) {
                var forbiddenInstruction = illegalInstructions_1_1.value;
                try {
                    for (var code_1 = (e_2 = void 0, __values(code)), code_1_1 = code_1.next(); !code_1_1.done; code_1_1 = code_1.next()) {
                        var instruction = code_1_1.value;
                        if (instruction.prim === forbiddenInstruction) {
                            throw new tzip16_errors_1.ForbiddenInstructionInViewCode(forbiddenInstruction);
                        }
                        if (instruction.args && instruction.args.length !== 0) {
                            this.findForbiddenInstructionInViewCode(instruction.args);
                        }
                    }
                }
                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                finally {
                    try {
                        if (code_1_1 && !code_1_1.done && (_b = code_1.return)) _b.call(code_1);
                    }
                    finally { if (e_2) throw e_2.error; }
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (illegalInstructions_1_1 && !illegalInstructions_1_1.done && (_a = illegalInstructions_1.return)) _a.call(illegalInstructions_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
    };
    /**
     * @description According to the tzip-16 standard, in the first version of the specification, the instruction SELF should only be used before ADDRESS
     * The method throws an error is the instruction SELF is present, but not followed by ADDRESS
     */
    MichelsonStorageView.prototype.illegalUseOfSelfInstruction = function (code) {
        var e_3, _a;
        try {
            for (var code_2 = __values(code), code_2_1 = code_2.next(); !code_2_1.done; code_2_1 = code_2.next()) {
                var instruction = code_2_1.value;
                if (instruction.prim === 'SELF') {
                    var index = code.indexOf(instruction);
                    var nextInstruction = code[index + 1] ? code[index + 1].prim : undefined;
                    if (nextInstruction !== 'ADDRESS') {
                        throw new tzip16_errors_1.ForbiddenInstructionInViewCode('the instruction SELF should only be used before ADDRESS');
                    }
                }
                if (instruction.args && instruction.args.length !== 0) {
                    this.illegalUseOfSelfInstruction(instruction.args);
                }
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (code_2_1 && !code_2_1.done && (_a = code_2.return)) _a.call(code_2);
            }
            finally { if (e_3) throw e_3.error; }
        }
    };
    /**
     * @description Loops through the view's code and replace SELF, BALANCE, NOW, and CHAIN_ID with Michelson expressions that match the current context, if applicable.
     */
    MichelsonStorageView.prototype.adaptViewCodeToContext = function (code, contractBalance, blockTimeStamp, chainId) {
        var _this = this;
        var instructionsToReplace = {
            SELF: [
                { prim: 'PUSH', args: [{ prim: 'address' }, { string: this.contract.address }] },
                { prim: 'CONTRACT', args: [{ prim: 'unit' }] },
                { prim: 'IF_NONE', args: [[{ prim: 'UNIT' }, { prim: 'FAILWITH' }], []] }
            ],
            BALANCE: [{ prim: 'PUSH', args: [{ prim: 'mutez' }, { int: contractBalance }] }],
            NOW: [{ prim: 'PUSH', args: [{ prim: 'timestamp' }, { string: blockTimeStamp }] }],
            CHAIN_ID: [{ prim: 'PUSH', args: [{ prim: 'string' }, { string: chainId }] }]
        };
        code.forEach(function (x, i) {
            for (var instruction in instructionsToReplace) {
                if (x.prim === instruction) {
                    code[i] = Object(instructionsToReplace)[instruction];
                }
                if (x.args && x.args.length !== 0) {
                    _this.adaptViewCodeToContext(x.args, contractBalance, blockTimeStamp, chainId);
                }
            }
        });
        return code;
    };
    MichelsonStorageView.prototype.formatArgsAndParameter = function (argView) {
        var args = argView;
        var viewParameterType = this.viewParameterType;
        if (!viewParameterType) {
            viewParameterType = { args: [], prim: 'unit', annots: [] };
        }
        if (viewParameterType.prim === 'unit') {
            if (args.length === 0) {
                args = ['Unit'];
            }
            if (args.length !== 0 && args[0] !== 'Unit') {
                throw new tzip16_errors_1.NoParameterExpectedError(this.viewName, argView);
            }
        }
        var parameterViewSchema = new michelson_encoder_1.ParameterSchema(viewParameterType);
        this.validateArgs(args, parameterViewSchema, this.viewName);
        var arg = parameterViewSchema.Encode.apply(parameterViewSchema, __spreadArray([], __read(args)));
        return { arg: arg, viewParameterType: viewParameterType };
    };
    MichelsonStorageView.prototype.executeView = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return __awaiter(this, void 0, void 0, function () {
            var _a, arg, viewParameterType, storageType, storageArgs, storageValue, chainId, contractBalance, block, blockTimestamp, protocolHash, code, viewScript, result, viewResultSchema;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        // validate view code against tzip-16 specifications
                        this.findForbiddenInstructionInViewCode(this.code);
                        this.illegalUseOfSelfInstruction(this.code);
                        _a = this.formatArgsAndParameter(args), arg = _a.arg, viewParameterType = _a.viewParameterType;
                        storageType = this.contract.script.code.find(function (x) { return x.prim === 'storage'; });
                        storageArgs = storageType.args[0];
                        storageValue = this.contract.script.storage;
                        return [4 /*yield*/, this.rpc.getChainId()];
                    case 1:
                        chainId = _b.sent();
                        return [4 /*yield*/, this.rpc.getBalance(this.contract.address)];
                    case 2:
                        contractBalance = (_b.sent()).toString();
                        return [4 /*yield*/, this.rpc.getBlock()];
                    case 3:
                        block = _b.sent();
                        blockTimestamp = block.header.timestamp.toString();
                        protocolHash = block.protocol;
                        code = this.adaptViewCodeToContext(this.code, contractBalance, blockTimestamp, chainId);
                        if (!this.viewParameterType) {
                            code.unshift({ prim: 'CDR' });
                        }
                        viewScript = {
                            script: [
                                { prim: 'parameter', args: [{ prim: 'pair', args: [viewParameterType, storageArgs] }] },
                                { prim: 'storage', args: [{ prim: 'option', args: [this.returnType] }] },
                                {
                                    prim: 'code',
                                    args: [
                                        [
                                            { prim: 'CAR' },
                                            code,
                                            { prim: 'SOME' },
                                            { prim: 'NIL', args: [{ prim: 'operation' }] },
                                            { prim: 'PAIR' }
                                        ]
                                    ]
                                }
                            ],
                            storage: { prim: 'None' },
                            input: { prim: 'Pair', args: [arg, storageValue] },
                            amount: '0',
                            chain_id: chainId,
                            balance: '0'
                        };
                        return [4 /*yield*/, this.rpc.runCode(viewScript)];
                    case 4:
                        result = _b.sent();
                        viewResultSchema = new michelson_encoder_1.ParameterSchema(this.returnType);
                        return [2 /*return*/, viewResultSchema.Execute(result.storage.args[0])];
                }
            });
        });
    };
    return MichelsonStorageView;
}());
exports.MichelsonStorageView = MichelsonStorageView;
//# sourceMappingURL=michelson-storage-view.js.map