"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Tzip16ContractAbstraction = void 0;
var taquito_1 = require("@taquito/taquito");
var utils_1 = require("@taquito/utils");
var tzip16_errors_1 = require("./tzip16-errors");
var bignumber_js_1 = require("bignumber.js");
var michelson_encoder_1 = require("@taquito/michelson-encoder");
var viewFactory_1 = require("./viewKind/viewFactory");
var metadataBigMapType = {
    prim: 'big_map',
    args: [{ prim: 'string' }, { prim: 'bytes' }],
    annots: ['%metadata']
};
var Tzip16ContractAbstraction = /** @class */ (function () {
    function Tzip16ContractAbstraction(constractAbstraction, context) {
        this.constractAbstraction = constractAbstraction;
        this.context = context;
        this._viewFactory = new viewFactory_1.ViewFactory();
        this._metadataViewsObject = {};
        this._metadataProvider = context.metadataProvider;
    }
    Tzip16ContractAbstraction.prototype.findMetadataBigMap = function () {
        var metadataBigMapId = this.constractAbstraction.schema.FindFirstInTopLevelPair(this.constractAbstraction.script.storage, metadataBigMapType);
        if (!metadataBigMapId) {
            throw new tzip16_errors_1.BigMapMetadataNotFound();
        }
        return new taquito_1.BigMapAbstraction(new bignumber_js_1.default(metadataBigMapId['int']), new michelson_encoder_1.Schema(metadataBigMapType), this.context.contract);
    };
    Tzip16ContractAbstraction.prototype.getUriOrFail = function () {
        return __awaiter(this, void 0, void 0, function () {
            var metadataBigMap, uri;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        metadataBigMap = this.findMetadataBigMap();
                        return [4 /*yield*/, metadataBigMap.get('')];
                    case 1:
                        uri = _a.sent();
                        if (!uri) {
                            throw new tzip16_errors_1.UriNotFound();
                        }
                        return [2 /*return*/, uri];
                }
            });
        });
    };
    /**
     * @description Return an object containing the metadata, the uri, an optional integrity check result and an optional sha256 hash
     */
    Tzip16ContractAbstraction.prototype.getMetadata = function () {
        return __awaiter(this, void 0, void 0, function () {
            var uri, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!this._metadataProvider) {
                            throw new tzip16_errors_1.UnconfiguredMetadataProviderError();
                        }
                        if (!!this._metadataEnvelope) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.getUriOrFail()];
                    case 1:
                        uri = _b.sent();
                        _a = this;
                        return [4 /*yield*/, this._metadataProvider.provideMetadata(this.constractAbstraction, utils_1.bytes2Char(uri), this.context)];
                    case 2:
                        _a._metadataEnvelope = _b.sent();
                        _b.label = 3;
                    case 3: return [2 /*return*/, this._metadataEnvelope];
                }
            });
        });
    };
    Tzip16ContractAbstraction.prototype.metadataViews = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(Object.keys(this._metadataViewsObject).length === 0)) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.initializeMetadataViewsList()];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2: return [2 /*return*/, this._metadataViewsObject];
                }
            });
        });
    };
    Tzip16ContractAbstraction.prototype.initializeMetadataViewsList = function () {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var metadata, metadataViews;
            var _this = this;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.getMetadata()];
                    case 1:
                        metadata = (_b.sent()).metadata;
                        metadataViews = {};
                        (_a = metadata.views) === null || _a === void 0 ? void 0 : _a.forEach(function (view) { return _this.createViewImplementations(view, metadataViews); });
                        this._metadataViewsObject = metadataViews;
                        return [2 /*return*/];
                }
            });
        });
    };
    Tzip16ContractAbstraction.prototype.generateIndexedViewName = function (viewName, metadataViews) {
        var i = 1;
        if (viewName in metadataViews) {
            while ("" + viewName + i in metadataViews) {
                i++;
            }
            viewName = "" + viewName + i;
        }
        return viewName;
    };
    Tzip16ContractAbstraction.prototype.createViewImplementations = function (view, metadataViews) {
        var e_1, _a;
        var _b;
        try {
            for (var _c = __values((_b = view === null || view === void 0 ? void 0 : view.implementations) !== null && _b !== void 0 ? _b : []), _d = _c.next(); !_d.done; _d = _c.next()) {
                var viewImplementation = _d.value;
                if (view.name) {
                    // when views have the same name, add an index at the end of the name
                    var viewName = this.generateIndexedViewName(view.name, metadataViews);
                    var metadataView = this._viewFactory.getView(viewName, this.context.rpc, this.constractAbstraction, viewImplementation);
                    if (metadataView) {
                        metadataViews[viewName] = metadataView;
                    }
                    else {
                        console.warn("Skipped generating " + viewName + " because the view has an unsupported type: " + this._viewFactory.getImplementationType(viewImplementation));
                    }
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
            }
            finally { if (e_1) throw e_1.error; }
        }
    };
    return Tzip16ContractAbstraction;
}());
exports.Tzip16ContractAbstraction = Tzip16ContractAbstraction;
//# sourceMappingURL=tzip16-contract-abstraction.js.map